"use strict";(self.webpackChunkzeuz_docs=self.webpackChunkzeuz_docs||[]).push([[8749],{91895:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"zeuz-platform-20250518","metadata":{"permalink":"/blog/zeuz-platform-20250518","source":"@site/blog/2025-05-18-zeuz-platform-20250518/index.md","title":"ZeuZ Platform 20250518","description":"---","date":"2025-05-18T00:00:00.000Z","tags":[{"inline":false,"label":"Changelog","permalink":"/blog/tags/changelog","description":"ZeuZ platform changelogs"}],"readingTime":5.775,"hasTruncateMarker":true,"authors":[{"name":"Mohammed Sazid Al Rashid","title":"Technical Lead","url":"https://github.com/sazid","page":{"permalink":"/blog/authors/sazid"},"socials":{"x":"https://x.com/sazidz","linkedin":"https://www.linkedin.com/in/sazidz/","github":"https://github.com/sazid","newsletter":"https://sazid.github.io"},"imageURL":"https://github.com/sazid.png","key":"sazid"}],"frontMatter":{"slug":"zeuz-platform-20250518","title":"ZeuZ Platform 20250518","authors":["sazid"],"tags":["changelog"]},"unlisted":false},"content":"---\\n\\n*Release date: May 18, 2025*\\n\\n---\\n\\nWelcome to the May 2025 release of the ZeuZ platform. There are many updates in\\nthis version that we hope you\'ll like, some of the key highlights include:\\n\\n**Features**\\n\\n- Seamless ZeuZ Node connect\\n- AI-Powered Mobile inspector\\n- Variable viewer in Debug page\\n- AI-Powered Release report summary\\n- Pre-requisite test case\\n- Rerun an existing RunID\\n- Fail analysis report\\n\\n\x3c!-- truncate --\x3e\\n\\n**Bug fixes**\\n\\n- Testing > Reports > Release Report > Fix report generation issue when GitHub\\n  integration is missing.\\n- Testing > Testcase > Create Testcase > Step > Fixed step section slider\\n  visibility issue Caused by Table Insertions in Description or Expected Fields\\n- Global attachments scope fix.\\n- Testing > Reports > Execution > Build to Build comparison bug fixed.\\n\\n**Other enhancements**\\n\\n- Testing > Reports > Fail Analysis > Improve assignee user search functionality.\\n- Testing > History > Optimized page load time/performance.\\n- Project > Create/Edit > Task, Bug & Requirement pages > Feature shows up in wrong\\n  team/project.\\n- Testing > Deployments > History & Set page > Minor UI enhancements.\\n- Restricted Datastore access by team/project.\\n- Improved GitHub issue linking process\\n- Testing > Deployments > History > Run Queue feature and UI updated, also\\n  fixed/updated some minor problems.\\n- Storybook Integration for UI Components\\n- Testing > Deployments > Set/History > Enhanced Donut Charts Feature and Total Value Fix\\n\\n- Automatic Default Filter for Fail Analysis Report\\n- Testing > Reports > Fail Analysis > Border Color Redesign for Clarity\\n- Testing > Test case edit pages, Run History Border Color Now Reflects Test Case Status\\n\\n## Seamless ZeuZ Node connect\\n\\nConnect your ZeuZ Node without worrying about launching a terminal and copy\\npasting the node command.\\n\\n[View the accompanying ZeuZ Node release](https://github.com/AutomationSolutionz/Zeuz_Python_Node/releases/tag/v20.0.0).\\n\\n<video controls loop>\\n  <source src=\\"/blog/zeuz-platform-20250518/Connect ZeuZ Node.mp4\\" type=\\"video/mp4\\" />\\n</video>\\n\\n## AI-Powered Mobile inspector\\n\\nInspect Android (tm) applications right inside ZeuZ Server without having to\\ninstall additional tools such as Appium Inspector or Android uiautomatorviewer.\\n\\nInstalling these tools and configuring them was a real challenge and often times\\na nightmare involving hours of fiddling around with setups. Now, all you need to\\ndo is connect your mobile device or launch an emulator in your computer, run\\nZeuZ Node and connect it to the ZeuZ server. ZeuZ server will take care of the\\nrest. This also brought one additional benefit that was otherwise impossible to solve previously:\\n\\n> You do not have to restart the adb server every time after you\'ve inspected\\n> them through Appium/uiautomatorviewer.\\n\\n**Features**\\n\\n1. **Screenshot and Element Tree Detection**: Improved accuracy in detecting and displaying UI elements.  \\n2. **Attribute List Panel**: A dedicated right-side panel for inspecting element attributes.  \\n3. **Search Functionality**: Use **Ctrl+F** to search by CSS, XPath, or value.  \\n4. **Dual DOM Support**: ADB and Appium now both provide DOM access, eliminating inspection barriers when the Appium server is active.  \\n\\n![Mobile insepctor](mobile-inspector.png)\\n\\n## Variable viewer in Debug page\\n\\nWhen debugging a test case, users often need to inspect current Zeuz node variables to build further actions. This feature introduces a hierarchical tree view of variables in the Debug page, providing a clean and intuitive interface to navigate complex data structures. Variables are displayed in three distinct formats:  \\n\\n1. **JSON Object Variables**: Standard JSON-compatible variables with reasonably sized values.  \\n2. **JSON Schema Variables**: Large JSON variables that are truncated for readability and presented as schemas.  \\n3. **Non-JSON Variables**: Non-JSON objects (e.g., Python modules, WebDriver instances, WebDriver elements) with up to 200 properties displayed.  \\n4. **Oversized Values**: Variables with excessively large values\u2014even after schema conversion\u2014are omitted for performance.  \\n\\n![Debug variable viewer](debug-variables.png)\\n\\n## AI-Powered Release report summary\\n\\nAn intelligent report summary component has been added to analyze release data and present key insights through a modern UI. This feature enables stakeholders to quickly assess release impact, quality, and notable changes without sifting through lengthy detailed reports.\\n\\n![AI-Powered release report summary](ai-powered-release-report-summary.png)  \\n\\n## Pre-requisite test case\\n\\nThe pre-requisite test case feature will allow one test case to mark another\\ntest case as it\'s pre-requisite. When the test case is deployed, the\\npre-requisite test case will get executed first before itself.\\n\\nWhen multiple test cases have a common pre-requisite test case and they are\\ndeployed, the pre-requisite test case will be executed only once throughout that\\nentire RunID (run session).\\n\\nPre-requisite chain must not form a cyclic dependency. They will be prevented\\nduring link time and deployment time.\\n\\n**Background / Context**\\n\\n- In many test environments, testers typically need to perform pre-test setup\\nsuch as data preparation, environment setup with docker or other tools, etc. To\\nachieve this with ZeuZ, users had to rely on set re-ordering feature to ensure\\nthat the pre-setup tests are executed at the beginning.\\n\\n- There are also cases where a single test set may contain multiple groups of\\ntest cases which have their own pre-requisites.\\n\\n- A test case which has a pre-requisite can be present in multiple sets.\\n\\nAll of the above makes it challenging for a tester to debug or run test cases\\nthat contain pre-requisite steps.\\n\\n**Pre-requisite search in test case details tab:**  \\n![pre-requisite search in test case details tab](pre-requisite-search-in-tc-detail.png)\\n\\n---\\n\\n**Pre-requisite, once selected:**  \\n![Pre-requisite, once selected](pre-requisite-once-selected.png)\\n\\n---\\n\\n**Rerun and pre-requisite selection from Testing > Run tests page:**  \\n![Rerun and pre-requisite selection from Testing > Run tests page](rerun-and-pre-requisite-in-run-test.png)\\n\\n## Rerun an existing RunID\\n\\nLets users re-run an existing runid or a selected number of test cases in a\\nrunid.\\n\\n**Background**\\n\\nDuring day to day operations, users often find themselves trying to rerun test\\ncases in an already completed/in-progress runid for various reasons, including\\nbut not limited to:\\n\\n1. A test case failed due to a temporary issue. It\'s not possible or\\n   economically feasible to rerun a whole test set of 1k+ test cases again just\\n   to make the RunID status green.\\n2. Node was killed before it could send reports to the server because a test\\n   case was processing data that could not fit into the RAM. Thus, leaving the\\n   test case as submitted in the RunID.\\n\\n**Search runids for rerun (Testing > Run tests > Advanced settings)**  \\n![Search runids for rerun](search-runids-for-rerun.png)\\n\\n## Fail analysis report\\n\\nWhen one or more test cases fail across multiple test cases, it becomes very\\nhard for testers and managers alike, to find the root or common cause of\\nfailures. Its also hard to *not create* duplicate bug reports for the same\\nfailure reason because multiple people may be working through the failed test\\ncases at the same time. This creates a lot of confusion and frustration among\\nthe QAs, Devs and Managers while being a source of time waster.\\n\\nZeuZ Fail analysis report solves this issue by analyzing all your failed test\\nsteps for common cause of failures and group them together. Ideally, if one test\\ncase is fixed, all other test cases in the same group should be fixed\\nautomatically as long as the steps are global."}]}}')}}]);